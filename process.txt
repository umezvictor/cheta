work flow

set up express
connect to database
create schema - Users, Admin, tasks, ovulation
set up routes (use validator package) login, register with email activation, reset password, delete account, logout
connect to react frontend

main app tasks
user logs in 
adds a new task to the reminder list  -- title, time to be reminded
update a task  
mark completed
delete task
set ovulation date reminder


cron jobs

send reminder via - sms, email and push  notifications


the mystery behind redux

eg, login functionality

Once the login button is clicked, the following happens

1. the loginUser (located in authActions.js) action creator is fired, it calls the action type
of SET_CURRENT_USER
2. the authActions file dispatches the action created to the authReducer
it uses SET_CURRENT_USER to let the reducer know what action what was taken and how to 
determine the next state of the application. 
Note: action types are the relationships between reducers and authActions

3. the reducer updates the state of the application based on the action type and sends signal to the store

4. the store is updated and the new state is made available to the frontend app



Note:
redux-thunk middleware handles asynchronous actions in redux
